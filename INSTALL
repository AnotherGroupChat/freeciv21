=====================
Installing Freeciv21:
=====================

This file describes how to compile and install Freeciv21. Last time we made sure this file is up
to date was 14-Feb-21. Last major update was 14-Feb-21.

There may be a localized version of this file in the ./doc directory, named INSTALL.<locale>
(e.g., INSTALL.de).

This document contains sections and subsections as follows:
     0. Prerequisites:
     1. Prerequisites for the Qt client:
     2. Compiling Freeciv21:
     3. Installation:
     4. Native Language Support:
     5. Readline Support:
     6. Debian notes:
     7. Windows notes:
     8. Mac OS X and Darwin notes:


0. Prerequisites:
=================

Freeciv21 has a number of prerequisites.  Note, that apart from the first prerequisite, the
Freeciv21 configuration process is smart enough to work out whether your system is suitable.  If in
doubt, just try it.

 - Unix (or similar)

The Unix operating system, a work-alike such as Linux or FreeBSD, or some OS that provides a very
Unix-like personality or mode, like EMX under OS/2 or the Cygnus Cygwin toolkit under Windows.  (See
https://www.cygwin.com/).  Support for BSD-style TCP/IP sockets is essential, as is a Bourne-shell
compatible shell, such as GNU "bash".  (Most Unixes fit the bill...)

 - An ANSI C and C++ compiler.

Freeciv21 is written in very portable (almost) ANSI C and C++.  Both 32- and 64-bit machines are
supported.  You cannot use a "K&R C" compiler, or a C++ compiler.

Development of Freeciv21 is primarily done with "gcc", the GNU project's excellent C compiler, or
on Windows MS Visual C.

 - A "cmake" program.

Freeciv21 developers generally use "cmake", the Kitware make program.

Officially released versions of Freeciv21 are designed to have makefiles which work with most
cmake programs.

You can check if you have GNU make installed on your system by typing:

    % cmake --version

The output should include "Kitware cmake" somewhere.

 - Ninja cmake build program  

 - libtool version 2.2 or better

 - libcurl version 7.15.4 or better

Libcurl takes care of http communication with the metaserver, and file transfers of modpack
installers.  http://curl.haxx.se/

 - libicu

Libicu helps handling UTF-8 texts. http://site.icu-project.org/

 - libsqlite3

   http://www.sqlite.org/

The git version has additional requirements. A release version contains the generated files.

 - The programs from GNU gettext version 0.15 or better

Especially the xgettext program is required to create the *.gmo files which aren't included in
the git tree.

 - libkf5aarchive

 - libSDL Mixer


1. Prerequisites for the Qt client:
===================================

The Freeciv21 project maintains a single Qt client.

 - C++ compiler.

Qt-client is written in C++, so you need appropriate compiler. In Freeciv21 development, g++ has
been used.

 - Qt5Core, Qt5Gui, and Qt5Widgets libraries and headers. At least version 5.11 is required.


2. Compiling and Installing Freeciv21:
======================================

If all has gone well previous to this point, then compiling Freeciv21 should be as easy as typing
"make" (or preferably, "gmake").

If you have problems, read the file BUGS, and follow the advice carefully.  If the problem is with
"gettext", please read the Native Language Support section, below, for possible work-arounds.

After compilation, the important results are:

  - The "client/freeciv-qt" and "server/freeciv-server" binaries.
  - The "data/" directory, which contains the graphics and scenarios.
  - The "translations/" directory, which contains the localization files.

It's perfectly feasible to play Freeciv21 in this directory, without installing it.

See the README file for more information.

(However you cannot use Internationalization when playing Freeciv21 from the source directory; you
must install Freeciv21 for that.)


4. Installation:
================

Installing Freeciv21 involves installing the components mentioned in the
Compiling Freeciv21 section.  These need to be copied to a directory such
as /usr/local (the default), /usr/games, /usr/games/Freeciv21,
/usr/local/Freeciv21, or some other suitable directory.

Typing "make install" should install everything correctly on your machine.
You may like to use the --prefix=DIR configure option (see the Generating
the Makefile section) to ensure the files get placed where you want.

When the Freeciv21 client and Freeciv21 server are run they both need to 
find some files from the "data" directory.  By default Freeciv21 looks
in the following directories, in order, for any data files: the current 
directory; the "data" subdirectory of the current directory; the 
subdirectory ".freeciv" in the user's home directory; and the directory
where the files are placed by running "make install".  You can override
this search patch by setting the FREECIV_DATA_PATH environment variable, to
a single directory or a list of directories separated by colons.

For example:

  % setenv FREECIV_DATA_PATH "/usr/games/freeciv/data:./data"
  (for users of csh, tcsh, etc.)

  % FREECIV_DATA_PATH="/usr/games/freeciv/data:./data"; export FREECIV_DATA_PATH
  (for users of sh, bash, ksh, zsh, etc.)

Also, note that you generally must install Freeciv21 if you wish to use
its Native Language Support.  See the README file for more information.


5. Native Language Support:
===========================

Freeciv21 uses the "gettext" system for Native Language Support.

If you experience problems with gettext in either configuring or compiling
Freeciv21, there are a few work-arounds you can try:

1. If you don't need Native Language Support, disable it using the
   "--disable-nls" ./configure option:

      % ./configure --disable-nls
      % make

2. You can try to install the latest version of GNU gettext.
   It may be obtained from here:

      https://ftp.gnu.org/gnu/gettext/gettext-0.21.tar.xz


6. Readline Support:
====================

Freeciv21 has optional support for the readline library.

Readline support is what makes the server command line behave sensibly,
making it possible to
 - Use the backspace key.
 - Use the cursor to move back and forth on the line you have written.
 - Use TAB completion of commands and command arguments. Ie, when you
   push tab the server will finish the word for you if there is only one
   possible choice.
 - Use the up and down cursor to scroll through the history of previously
   entered commands.
 - etc.

The configure script will check if you have the readline library correctly
installed. If so it will automatically set up the makefiles so that readline
is compiled into the server. If not then it will just silently configure
without readline support.
You can force configure to include readline or die trying by giving
configure the --with-readline option:

 % ./configure --with-readline

Some linux distributions (and possibly other operating systems) have
readline version 4 incorrectly installed, so that readline is not
set up to declare it's dynamic dependencies. In that case configure
will try to guess which extra libs it should link against and add them.
The configure script will give a warning if it had to add extra libs
to make readline work. This should be harmless, and is just meant as
a reminder to the folks who distribute readline. :)




8. Mac OS X and Darwin notes:
=============================

Apple's version of GCC uses precompiled headers that does not support
vararg macros (a GCC extension).  This causes GCC to fail when
compiling Freeciv21 since the compiler is otherwise (mostly)
indistinguishable from vanilla GCC.  So instead of the usual

  % ./configure <...>

you should use either

 Bourne shell:
   $ CC="gcc -no-cpp-precomp" ./configure <...>

or

 C shell:
   % env CC="gcc -no-cpp-precomp" ./configure <...>

depending on whether your shell is a Bourne or C shell variant.  (If
in doubt, just try both to see which one will work.)

Replace <...> with whatever additional arguments you want to give to
configure.


9. Windows notes:
=================

Windows version of Freeciv21 can be built either with Msys2 or MSVC.

Build instructions for Msys2 versions are documented on doc/README.msys2


** END **
